#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: XiaoYu OpenWrt 19 My

on:
#  repository_dispatch:    #提交yml触发
#    types: run
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      ip_addr:
        description: '固件 IP 地址 [可选]'
        default: ''
#  release:
#    types: published
#  push:                  #提交config触发
#    branches:
#      - master
#    paths:
#      - 'xymy.config'
  schedule:              #定时触发
    - cron: 0 0 1,15 * *
  watch:                  #点star触发
    types: started

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-19.07
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: xymy.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: xymy.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai
  FRP_SERVER_ADDR: ${{ secrets.FRP_SERVER_ADDR }}
  FRP_TOKEN: ${{ secrets.FRP_TOKEN }}
  FRP_HTTP_PORT: ${{ secrets.FRP_HTTP_PORT }}
  FRP_HTTPS_PORT: ${{ secrets.FRP_HTTPs_PORT }}

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e xymod ] && cp -r xymod/* openwrt/target
        [ -e files ] && mv files openwrt/files
        #rm -rf openwrt/files/etc/config
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Default FRP Setting
      if: env.FRP_SERVER_ADDR && env.FRP_TOKEN
      run: |
        #sed -i "s/frp.test.test/${{ env.FRP_SERVER_ADDR }}/g" openwrt/files/etc/config/frp
        #sed -i "s/123456789/${{ env.FRP_TOKEN }}/g" openwrt/files/etc/config/frp

    - name: Default FRP Port Setting
      if: env.FRP_HTTP_PORT && env.FRP_HTTPS_PORT
      run: |
        sed -i "s/vhost_http_port '80'/vhost_http_port '${{ env.FRP_HTTP_PORT }}'/g" openwrt/files/etc/config/frp
        sed -i "s/vhost_https_port '443'/vhost_https_port '${{ env.FRP_HTTPS_PORT }}'/g" openwrt/files/etc/config/frp

    - name: Default IP Setting
      if: github.event.inputs.ip_addr != ''
      run: |
        sed -i "s/192.168.123.1/${{ github.event.inputs.ip_addr }}/g" openwrt/package/lean/default-settings/files/zzz-default-settings

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
#        echo "FIRMWARE_NAME=$(date "+%y.%m.%d")-XY-19-My-Passwall" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        rm -rf ./artifact/
        mkdir -p ./artifact/
        find openwrt/bin/targets/ -name "*combined*vmdk*" | xargs -i mv -f {} ./artifact/
        find openwrt/bin/targets/ -name "*combined*img*" | xargs -i mv -f {} ./artifact/
        find openwrt/bin/targets/ -name "*sysupgrade*bin*" | xargs -i mv -f {} ./artifact/
        find openwrt/bin/targets/ -name "*rootfs*tar*gz*" | xargs -i mv -f {} ./artifact/
        find openwrt/bin/targets/ -name "sha256sums" | xargs -i mv -f {} ./artifact/
        find openwrt/bin/targets/ -name "config.buildinfo" | xargs -i mv -f {} ./artifact/
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.FILE_DATE }}_${{ env.DEVICE_NAME }}_19_My_Passwall
#        name: ${{ env.FIRMWARE_NAME }}
        path: ./artifact/
